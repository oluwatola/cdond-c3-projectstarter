version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string         # Add parameter here
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>>"
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive 
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>> \

  install_awscli:
    description: install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
         #apk add --update --no-cache aws-cli \

  install_ansible:
    description: install Ansible v2
    steps:
      - run:
          name: Install Ansible v2
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: install node.JS
    steps:
      - run:
          name: Install Node.JS
          command: |
            curl -fsSL http://deb.nodesource.com/setup_13.x  |  sudo -E bash -
            sudo apt install -y nodejs

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string         # Add parameter here
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.workflow_id>>)  # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #Logic for reverting the database state
            if (( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert   
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-test] # Restore from cache
      - run: 
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test      # Your job code here
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-test] # Restore from cache
      - run: 
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-scan]     
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force      
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-scan]     
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli  # Docker image here that supports AWS CLI
    steps:
      - checkout   # Checkout code from git
      - run: 
          name: Install dependencies
          command: |
            yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 

      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 

      - run:
          name: Add back-end IP to Ansible inventory file
          command: |
            echo $(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text) >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt  

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  
   
  configure-infrastructure:
    docker:
      - image: cimg/base:stable #python:3.7-alpine3.16  #Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["05:c5:2d:a9:7e:9c:b5:52:f3:ca:64:d6:eb:77:5f:f9"] # Add ssh keys with fingerprint
      - attach_workspace: # attach workspace
          at: ~/
      #- run:
      #    name: Install dependencies
      #    command: |
      #      apk add --update --no-cache tar gzip ansible aws-cli
      - install_awscli
      - install_ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environments      # Here's where you will add some code to rollback on failure          

  run-migrations:
    docker:
      - image: circleci/node:13.8.0  #python:3.7-alpine3.16  Docker image here that supports NodeJS
    steps:
      - checkout 
      # - run:
      #     name: install dependencies
      #     command: |
      #       #sudo apt install -y tar gzip curl
      #       #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       #unzip -qq awscliv2.zip
      #       #sudo ./aws/install
      #       apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations.txt
      - run:
          name: send migration results to kvdb.io
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environments
      - revert-migrations
      
  deploy-frontend:
    docker:
      - image: cimg/base:stable #python:3.7-alpine3.16 # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["05:c5:2d:a9:7e:9c:b5:52:f3:ca:64:d6:eb:77:5f:f9"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - install_ansible
      - restore_cache:
          keys: [frontend-deps]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       cd frontend 
      #       npm install    #apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL = ${API_URL}"          
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -fr node_modules
            npm install 
            npm run build
            #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environments
      - revert-migrations # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image:  cimg/base:stable #python:3.7-alpine3.16 Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["05:c5:2d:a9:7e:9c:b5:52:f3:ca:64:d6:eb:77:5f:f9"] # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible

      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache tar gzip nodejs ansible aws-cli npm curl
      # - attach_workspace:
      #     at: ~/
      #- run:
      #    name: Install dependencies
      #    command: |
      #      apk add --update --no-cache tar gzip nodejs ansible npm curl
      #- restore_cache:
      #    keys: [backend-deps]
      - run: 
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../

            # tar -C backend -czvf artifact.tar.gz .
            # mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            # mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            # cd .circleci/ansible
          
            echo "Contents of the inventory.txt file is ------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      #- run:
      #    name: Install dependencies
      #    command: |
      #      cd backend
      #      npm install
      #- run:
      #    name: Package Backend
      #    command: |
      #      cd backend
      #      npm run build
      #      tar -czf artifact.tar.gz dist/* package*
      #
      #      cd ..
      #      cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      #- run:
      #    name: Deploy backend
      #    command: |
      #      export TYPEORM_MIGRATIONS_DIR=./migrations
      #      export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
      #      export TYPEORM_MIGRATIONS=./migrations/*.ts
      #
      #      cd .circleci/ansible
      #      cat inventory.txt
      #      ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environments
      - revert-migrations # Here's where you will add some code to rollback on failure 

  smoke-test:
    docker:
      - image: cimg/base:stable #python:3.7-alpine3.16      # Lightweight Docker image 
    steps:
      - checkout # Checkout code from git

      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
              
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo ${BACKEND_PUBLIC_IP}
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo ${API_URL}

            if curl -s ${API_URL}/api/status | grep "ok"
            #if curl -v --head "https://google.com"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environments
      - revert-migrations

  cloudfront-update:
    docker: 
      - image: amazon/aws-cli  #cimg/base:stable  Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      #- attach_workspace: # attach workspace
      #    at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Save Old WOrkflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\'WorkflowID\'].Value" \
                      --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update Cloudfront Distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack

            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy-environments # Here's where you will add some code to rollback on failure
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - install_nodejs
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/$KVDB_BUCKET/old_workflow_id)
            echo Old Workflow ID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "{CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo stack names: "${STACKS[@]}"
            
            # export OldWorkflowID=$(aws cloudformation \
            #   list-exports --query "Exports[?Name==\'WorkflowID\'].Value" \
            #   --no-paginate --output text)
            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            #   --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            #   echo Old Workflow Id: "${OldWorkflowID}"
              
            # aws cloudformation deploy \
            # --template-file .circleci/files/cloudfront.yml \
            # --stack-name udapeople-cloudfront \
            # --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            # --tags project=udapeople &

      
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "---------------Delete Confirmed------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else 
              echo "-----------------Cannot Cleanup------------------"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         filters:
            branches:
              only: [master]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - run-migrations:
         requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
         requires: [run-migrations]
      - smoke-test:
         requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
         requires: [smoke-test]
      #- cleanup:
      #   requires: [cloudfront-update] 

